#!/usr/bin/env python3
# by William Hofferbert
#
# This is a TCP server, which listens for information that is being
# broadcast at it via a combination of Teensy LC (analog monitor)
# and ESP8266 (serial data intake to Wifi)
#
# You need to set up the appropriate objects based on their key name
# that will be within the data coming from the teensy/ESP
#
# This project uses A1, A2, A3, A4 for 4 analog keys (potentiometers)
# and it uses D1, D2, for two digital keys (switches)
#

########################################################################
#
#
# midi variable definitions/imports
#
#
########################################################################

import mido
import os
import re
import time
from midiThing import midiThing

# midi device naming and setup
midiName = "Teensy-ESP-WiFi-MIDI"

# key name as it appears in tcp data = midiThing(midiChannel, midiCcNumber, initial value)
A1 = midiThing(0, 7, 64)
A2 = midiThing(0, 13, 64)
A3 = midiThing(0, 9, 64)
A4 = midiThing(0, 10, 64)

D1 = midiThing(0, 11, 0)
D2 = midiThing(0, 12, 0)

# wait some seconds for other software after reboot
init_sleep_secs = 5

########################################################################
#
#
# TCP server definitions/imports
#
#
########################################################################

import socket
import sys

# number of characters (bytes) to wait for
data_intake_limit = 80

# server address/port
server_address = ("172.24.1.1", 1234)

########################################################################
#
#
# midi definitions/functions
#
#
########################################################################

#
# sends a midi control change message to midi_output_device, which
# was created earlier
#

def send_cc(channel, ccnum, val):
    msg = mido.Message('control_change', channel=channel, control=ccnum, value=val)
    output = mido.open_output(midi_output_device)
    output.send(msg)

#
# iterate through midi things and see if we need to send CC messages
#

def update_midi(data_keyvals):
    for key, val in data_keyvals.items():
        # update the object we are dealing with
        globals()[key].update(val)
        # if any objects have changed values
        if globals()[key].has_changed():
            print("key: ", str(key), " has changed to: ", str(int(float(val))))
            #   send midi data
            channel = globals()[key].channel
            ccNum = globals()[key].ccNum
            #print(val)
            #print(type(val))
            midiVal = int(float(val))
            send_cc(channel, ccNum, midiVal)

#
# check_for_running_midi returns true if amidithru with the
# desired name is running already
#
# If so, assume to use that, since it's probably leftover
# from an earlier test/change.
#

def check_for_running_midi():
    # TODO make this better
    # so shitty, not pythonic at all
    # if only I weren't a linux sysadmin
    checkGrep = 'ps -ef | grep -Po "amidithru\s*' + midiName + '" | grep -v grep >/dev/null'
    check = os.system(checkGrep)
    #print("check val is %s" % check)
    # 0 = running
    # 256/anything else = nope
    return check

#
# this sets up the midi device via system and amidithru
#

def setup_midi_backend():
    # set up backend
    mido.set_backend('mido.backends.rtmidi')

    # system command to set up the midi thru port
    if check_for_running_midi() != 0:
        runCmd = "amidithru '" + midiName + "' &"
        os.system(runCmd)
        # wait a sec for amidithru to do it's thing
        time.sleep(1)
    
    # regex to match on rtmidi port name convention
    # TODO is it necessary to write:  "\s+(\d+)?:\d+)"  instead?
    nameRegex = "(" + midiName + ":" + midiName + "\s+\d+:\d+)"
    matcher = re.compile(nameRegex)
    newList = list(filter(matcher.match, mido.get_output_names()))
    # all to get the name of the thing we just made
    global midi_output_device
    midi_output_device = newList[0]


########################################################################
#
#
# TCP defs/funcs
#
#
########################################################################

#
# this picks apart the data from the teensy/esp and passes the sanitized
# information over to update_midi()
#

def analog_to_midival(data):
    arr = data.split(";")
    midi_data = {}
    for item in arr:
        pattern = r'([AD]\d+):(\d+)'
        results = re.search(pattern, item)
        objKey = ""
        objVal = ""
        try:
            objKey = results.group(1)
            objVal = results.group(2)
        except:
            print('bad split on regex! data: %s' % data, file=sys.stderr, flush=True)
            return
        if (re.match('A\d', objKey)):
            midival = (int(objVal) * 127) / 1024
            truncate = '%.02f' % midival
            midi_data[objKey] = truncate
        if (re.match('D\d', objKey)):
            midival = (int(objVal) * 127)
            midi_data[objKey] = midival
    # dict gets passed to another def for handling...
    update_midi(midi_data)


#
# This bit is in charge of getting the ball rolling and waiting for the
# teensy/esp to start going
#

def start_tcp_to_midi_server():
    # wait some secs
    time.sleep(init_sleep_secs)

    # maybe start midi output device
    setup_midi_backend()

    # tcp server object, create it
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(server_address)

    # Listen for incoming connections
    sys.stderr.write('starting up on %s port %s\n' % server_address)
    sock.listen(1)

    while True:
        # Wait for a connection
        connection, client_address = sock.accept()
        try:
            # Receive the data in small chunks and deal with it
            while True:
                data = connection.recv(data_intake_limit).decode('utf-8')
                regex = r'([AD]\d+:\d+\b;?)+$'
                match = re.match(regex, data)
                # if there's no regex match for the stuff, just continue
                if match == None:
                    continue
                # else pass the data to the other logic
                else:
                    analog_to_midival(str(match.group()))

        finally:
            # Clean up the connection
            connection.close()

#
# hey, you can import this if you want (but don't forget about midiThing)
#

if __name__ == "__main__":
    start_tcp_to_midi_server()
